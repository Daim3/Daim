#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/types.h> 
#include <sys/wait.h> 
 
#define MAX_CHILDREN 5 // Maximum number of child processes 
 
int main() { 
    int i, numChildren; 
    int fa[2]; // File descriptor for pipe 
    char mesej[256]; // Message buffer 
 
    // Create a pipe 
    if (pipe(fa) == -1) { 
        perror("Pipe creation failed"); 
        exit(1); 
    } 
 
    printf("Enter a message to send to child processes: "); 
    fgets(mesej, sizeof(mesej), stdin); 
 
    printf("Enter the number of child processes to create (max %d): ", MAX_CHILDREN); 
    scanf("%d", &numChildren); 
 
    // Fork into multiple child processes 
    for (i = 0; i < numChildren; i++) { 
        pid_t pid = fork(); 
 
        if (pid < 0) { 
            perror("Fork failed"); 
            exit(1); 
        } else if (pid == 0) { 
            // Child process 
 
            // Close the read end of the pipe 
            close(fa[0]); 
 
            printf("Child process %d with PID %d received message: %s", i + 1, getpid(), mesej); 
 
            // Write the message to the pipe 
            write(fa[1], mesej, sizeof(mesej)); 
            exit(0); 
        } 
    } 
 
    // Parent process 
 
    // Close the write end of the pipe 
    close(fa[1]); 
 
    // Wait for all child processes to finish 
    for (i = 0; i < numChildren; i++) { 
        wait(NULL); 
    } 
 
    printf("All child processes have terminated.\n"); 
 
    return 0; 
}
